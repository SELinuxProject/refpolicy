## <summary>AccountsService and daemon for manipulating user account information via D-Bus.</summary>

########################################
## <summary>
##	Execute a domain transition to
##	run accountsd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`accountsd_domtrans',`
	gen_require(`
		type accountsd_t, accountsd_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, accountsd_exec_t, accountsd_t)
')

########################################
## <summary>
##	Do not audit attempts to read and
##	write Accounts Daemon fifo files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`accountsd_dontaudit_rw_fifo_file',`
	gen_require(`
		type accountsd_t;
	')

	dontaudit $1 accountsd_t:fifo_file rw_fifo_file_perms;
')

########################################
## <summary>
##	Send and receive messages from
##	accountsd over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`accountsd_dbus_chat',`
	gen_require(`
		type accountsd_t;
		class dbus send_msg;
	')

	allow $1 accountsd_t:dbus send_msg;
	allow accountsd_t $1:dbus send_msg;
')

########################################
## <summary>
##	Search accountsd lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`accountsd_search_lib',`
	gen_require(`
		type accountsd_var_lib_t;
	')

	allow $1 accountsd_var_lib_t:dir search_dir_perms;
	files_search_var_lib($1)
')

########################################
## <summary>
##	Read accountsd lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`accountsd_read_lib_files',`
	gen_require(`
		type accountsd_var_lib_t;
	')

	files_search_var_lib($1)
	allow $1 accountsd_var_lib_t:dir list_dir_perms;
	read_files_pattern($1, accountsd_var_lib_t, accountsd_var_lib_t)
')

########################################
## <summary>
##	Create, read, write, and delete
##	accountsd lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`accountsd_manage_lib_files',`
	gen_require(`
		type accountsd_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, accountsd_var_lib_t, accountsd_var_lib_t)
')


########################################
## <summary>
##	Allow specified domain to start and stop accountsd units
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`accountsd_startstop',`
	gen_require(`
		type accountsd_unit_t;
		class service { start stop };
	')

	allow $1 accountsd_unit_t:service { start stop };
')

########################################
## <summary>
##	Get the system status information from accountsd
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`accountsd_status',`
	gen_require(`
		type accountsd_unit_t;
		class service status;
	')

	allow $1 accountsd_unit_t:service status;
')

########################################
## <summary>
##	All of the rules required to
##	administrate an accountsd environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role" unused="true">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`accountsd_admin',`
	gen_require(`
		type accountsd_t;
	')

	allow $1 accountsd_t:process { ptrace signal_perms };
	ps_process_pattern($1, accountsd_t)

	accountsd_manage_lib_files($1)
')
