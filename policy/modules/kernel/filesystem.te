policy_module(filesystem, 1.27.0)

########################################
#
# Declarations
#

attribute filesystem_type;
attribute filesystem_unconfined_type;
attribute noxattrfs;
attribute xattrfs;

##############################
#
# fs_t is the default type for persistent
# filesystems with extended attributes
#
type fs_t;
fs_xattr_type(fs_t)
sid fs gen_system_context(fs_t)

# Use xattrs for the following filesystem types.
# Requires that a security xattr handler exist for the filesystem.
fs_use_xattr btrfs gen_system_context(fs_t);
fs_use_xattr encfs gen_system_context(fs_t);
fs_use_xattr ext2 gen_system_context(fs_t);
fs_use_xattr ext3 gen_system_context(fs_t);
fs_use_xattr ext4 gen_system_context(fs_t);
fs_use_xattr ext4dev gen_system_context(fs_t);
fs_use_xattr f2fs gen_system_context(fs_t);
fs_use_xattr gfs gen_system_context(fs_t);
fs_use_xattr gfs2 gen_system_context(fs_t);
fs_use_xattr gpfs gen_system_context(fs_t);
fs_use_xattr jffs2 gen_system_context(fs_t);
fs_use_xattr jfs gen_system_context(fs_t);
fs_use_xattr lustre gen_system_context(fs_t);
fs_use_xattr overlay gen_system_context(fs_t);
fs_use_xattr squashfs gen_system_context(fs_t);
fs_use_xattr xfs gen_system_context(fs_t);
fs_use_xattr zfs gen_system_context(fs_t);

# Use the allocating task SID to label inodes in the following filesystem
# types, and label the filesystem itself with the specified context.
# This is appropriate for pseudo filesystems that represent objects
# like pipes and sockets, so that these objects are labeled with the same
# type as the creating task.
fs_use_task eventpollfs gen_system_context(fs_t);
fs_use_task pipefs gen_system_context(fs_t);
fs_use_task sockfs gen_system_context(fs_t);

##############################
#
# Non-persistent/pseudo filesystems
#

type anon_inodefs_t;
fs_type(anon_inodefs_t)
files_mountpoint(anon_inodefs_t)
genfscon anon_inodefs / gen_system_context(anon_inodefs_t)

type bdev_t;
fs_type(bdev_t)
genfscon bdev / gen_system_context(bdev_t)

type binfmt_misc_fs_t;
fs_type(binfmt_misc_fs_t)
files_mountpoint(binfmt_misc_fs_t)
genfscon binfmt_misc / gen_system_context(binfmt_misc_fs_t)

type bpf_t;
fs_type(bpf_t)
files_mountpoint(bpf_t)
dev_associate_sysfs(bpf_t)
genfscon bpf / gen_system_context(bpf_t)

type capifs_t;
fs_type(capifs_t)
files_mountpoint(capifs_t)
genfscon capifs / gen_system_context(capifs_t)

type cgroup_t;
fs_type(cgroup_t)
files_mountpoint(cgroup_t)
dev_associate_sysfs(cgroup_t)
genfscon cgroup / gen_system_context(cgroup_t)
genfscon cgroup2 / gen_system_context(cgroup_t)

type configfs_t;
fs_type(configfs_t)
genfscon configfs / gen_system_context(configfs_t)

type cpusetfs_t;
fs_type(cpusetfs_t)
allow cpusetfs_t self:filesystem associate;
genfscon cpuset / gen_system_context(cpusetfs_t)

type ecryptfs_t;
fs_noxattr_type(ecryptfs_t)
files_mountpoint(ecryptfs_t)
genfscon ecryptfs / gen_system_context(ecryptfs_t)

type efivarfs_t;
fs_noxattr_type(efivarfs_t)
files_mountpoint(efivarfs_t)
genfscon efivarfs / gen_system_context(efivarfs_t)

type futexfs_t;
fs_type(futexfs_t)
genfscon futexfs / gen_system_context(futexfs_t)

type hugetlbfs_t;
fs_xattr_type(hugetlbfs_t)
files_mountpoint(hugetlbfs_t)
dev_associate(hugetlbfs_t)
fs_use_trans hugetlbfs gen_system_context(hugetlbfs_t);

type ibmasmfs_t;
fs_type(ibmasmfs_t)
allow ibmasmfs_t self:filesystem associate;
genfscon ibmasmfs / gen_system_context(ibmasmfs_t)

type infinibandeventfs_t;
fs_type(infinibandeventfs_t)
allow infinibandeventfs_t self:filesystem associate;
genfscon infinibandeventfs / gen_system_context(infinibandeventfs_t)

type inotifyfs_t;
fs_type(inotifyfs_t)
genfscon inotifyfs / gen_system_context(inotifyfs_t)

type mvfs_t;
fs_noxattr_type(mvfs_t)
allow mvfs_t self:filesystem associate;
genfscon mvfs / gen_system_context(mvfs_t)

type nfsd_fs_t;
fs_type(nfsd_fs_t)
genfscon nfsd / gen_system_context(nfsd_fs_t)

type nsfs_t;
fs_type(nsfs_t)
genfscon nsfs / gen_system_context(nsfs_t)

type oprofilefs_t;
fs_type(oprofilefs_t)
genfscon oprofilefs / gen_system_context(oprofilefs_t)

type pstore_t;
fs_type(pstore_t)
files_mountpoint(pstore_t)
dev_associate_sysfs(pstore_t)
genfscon pstore / gen_system_context(pstore_t)

type ramfs_t;
fs_type(ramfs_t)
files_mountpoint(ramfs_t)
genfscon ramfs / gen_system_context(ramfs_t)

type romfs_t;
fs_type(romfs_t)
genfscon romfs / gen_system_context(romfs_t)
genfscon cramfs / gen_system_context(romfs_t)

type rpc_pipefs_t;
fs_type(rpc_pipefs_t)
genfscon rpc_pipefs / gen_system_context(rpc_pipefs_t)
files_mountpoint(rpc_pipefs_t)

type spufs_t;
fs_type(spufs_t)
genfscon spufs / gen_system_context(spufs_t)
files_mountpoint(spufs_t)

type sysv_t;
fs_noxattr_type(sysv_t)
files_mountpoint(sysv_t)
genfscon sysv / gen_system_context(sysv_t)
genfscon v7 / gen_system_context(sysv_t)

type tracefs_t;
fs_type(tracefs_t)
genfscon tracefs / gen_system_context(tracefs_t)

type vmblock_t;
fs_noxattr_type(vmblock_t)
files_mountpoint(vmblock_t)
genfscon vmblock / gen_system_context(vmblock_t)
genfscon vboxsf / gen_system_context(vmblock_t)
genfscon vmhgfs / gen_system_context(vmblock_t)

type vxfs_t;
fs_noxattr_type(vxfs_t)
files_mountpoint(vxfs_t)
genfscon vxfs / gen_system_context(vxfs_t)

#
# tmpfs_t is the type for tmpfs filesystems
#
type tmpfs_t;
dev_associate(tmpfs_t)
fs_xattr_type(tmpfs_t)
files_type(tmpfs_t)
files_mountpoint(tmpfs_t)
files_poly_parent(tmpfs_t)

# Use a transition SID based on the allocating task SID and the
# filesystem SID to label inodes in the following filesystem types,
# and label the filesystem itself with the specified context.
# This is appropriate for pseudo filesystems like devpts and tmpfs
# where we want to label objects with a derived type.
fs_use_trans mqueue gen_system_context(tmpfs_t);
fs_use_trans shm gen_system_context(tmpfs_t);
fs_use_trans tmpfs gen_system_context(tmpfs_t);

allow tmpfs_t noxattrfs:filesystem associate;

type xenfs_t;
fs_noxattr_type(xenfs_t)
files_mountpoint(xenfs_t)
genfscon xenfs / gen_system_context(xenfs_t)

##############################
#
# Filesystems without extended attribute support
#

type autofs_t;
fs_noxattr_type(autofs_t)
files_mountpoint(autofs_t)
genfscon autofs / gen_system_context(autofs_t)
genfscon automount / gen_system_context(autofs_t)

#
# cifs_t is the type for filesystems and their
# files shared from Windows servers
#
type cifs_t;
fs_noxattr_type(cifs_t)
files_mountpoint(cifs_t)
genfscon cifs / gen_system_context(cifs_t)
genfscon smbfs / gen_system_context(cifs_t)

#
# dosfs_t is the type for fat and vfat
# filesystems and their files.
#
type dosfs_t;
fs_noxattr_type(dosfs_t)
files_mountpoint(dosfs_t)
allow dosfs_t fs_t:filesystem associate;
genfscon fat / gen_system_context(dosfs_t)
genfscon hfs / gen_system_context(dosfs_t)
genfscon hfsplus / gen_system_context(dosfs_t)
genfscon msdos / gen_system_context(dosfs_t)
genfscon ntfs-3g / gen_system_context(dosfs_t)
genfscon ntfs / gen_system_context(dosfs_t)
genfscon vfat / gen_system_context(dosfs_t)

type fusefs_t;
fs_noxattr_type(fusefs_t)
files_mountpoint(fusefs_t)
allow fusefs_t self:filesystem associate;
allow fusefs_t fs_t:filesystem associate;
genfscon fuse / gen_system_context(fusefs_t)
genfscon fuseblk / gen_system_context(fusefs_t)
genfscon fusectl / gen_system_context(fusefs_t)

#
# iso9660_t is the type for CD filesystems
# and their files.
#
type iso9660_t;
fs_noxattr_type(iso9660_t)
files_mountpoint(iso9660_t)
genfscon iso9660 / gen_system_context(iso9660_t)
genfscon udf / gen_system_context(iso9660_t)

#
# removable_t is the default type of all removable media
#
type removable_t;
allow removable_t noxattrfs:filesystem associate;
fs_noxattr_type(removable_t)
files_mountpoint(removable_t)

#
# nfs_t is the default type for NFS file systems
# and their files.
#
type nfs_t;
fs_noxattr_type(nfs_t)
files_mountpoint(nfs_t)
genfscon nfs / gen_system_context(nfs_t)
genfscon nfs4 / gen_system_context(nfs_t)
genfscon afs / gen_system_context(nfs_t)
genfscon dazukofs / gen_system_context(nfs_t)
genfscon coda / gen_system_context(nfs_t)
genfscon lustre / gen_system_context(nfs_t)
genfscon ncpfs / gen_system_context(nfs_t)
genfscon reiserfs / gen_system_context(nfs_t)
genfscon panfs / gen_system_context(nfs_t)
genfscon gadgetfs / gen_system_context(nfs_t)

########################################
#
# Rules for all filesystem types
#

allow filesystem_type self:filesystem associate;

########################################
#
# Rules for filesystems without xattr support
#

# Allow me to mv from one noxattrfs to another nfs_t to dosfs_t for example
fs_associate_noxattr(noxattrfs)

########################################
#
# Unconfined access to this module
#

allow filesystem_unconfined_type filesystem_type:filesystem { mount remount unmount getattr relabelfrom relabelto associate quotamod quotaget watch };

# Create/access other files. fs_type is to pick up various
# pseudo filesystem types that are applied to both the filesystem
# and its files.
allow filesystem_unconfined_type filesystem_type:file { manage_file_perms relabelfrom relabelto map execute quotaon mounton execute_no_trans entrypoint audit_access execmod watch };
allow filesystem_unconfined_type filesystem_type:lnk_file  { manage_lnk_file_perms relabelfrom relabelto append map execute quotaon mounton open audit_access execmod watch };
allow filesystem_unconfined_type filesystem_type:sock_file { manage_sock_file_perms relabelfrom relabelto map execute quotaon mounton audit_access execmod watch };
allow filesystem_unconfined_type filesystem_type:fifo_file { manage_fifo_file_perms relabelfrom relabelto map execute quotaon mounton audit_access execmod watch };
allow filesystem_unconfined_type filesystem_type:blk_file { manage_blk_file_perms relabelfrom relabelto map execute quotaon mounton audit_access execmod watch };
allow filesystem_unconfined_type filesystem_type:chr_file { manage_chr_file_perms relabelfrom relabelto map execute quotaon mounton audit_access execmod watch };
allow filesystem_unconfined_type filesystem_type:dir { manage_dir_perms relabelfrom relabelto append map execute quotaon mounton add_name remove_name reparent search rmdir audit_access execmod watch };
